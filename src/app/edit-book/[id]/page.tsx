// src/app/edit-book/[id]/page.tsx

import { BookFormValues } from "@/lib/schemas"; 
import { getBookAction } from '@/app/actions'; 
import BookEditFormClient from "./BookEditFormClient"; 
import { getAllCategories } from '@/app/actions'; 
import { BookWithGenre, ReadingStatus } from "@/data/books"; 
import { notFound } from "next/navigation"; 


interface EditBookPageProps {
Â  params: {
Â  Â  id: string;
Â  };
}

// Sua funÃ§Ã£o de busca de dados no servidor (mantida)
async function fetchBookData(id: string): Promise<BookWithGenre | null> {
Â  Â  try {
Â  Â  Â  Â  const book = await getBookAction(id);
Â  Â  Â  Â  return book as BookWithGenre | null;
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Erro ao buscar livro:", error);
Â  Â  Â  Â  return null;
Â  Â  }
}

// FunÃ§Ã£o auxiliar para mapear o status do DB (portuguÃªs) para o Form (inglÃªs)
const mapStatusToForm = (dbStatus: ReadingStatus): BookFormValues['status'] => {
Â  Â  switch (dbStatus) {
Â  Â  Â  Â  case "QUERO_LER":
Â  Â  Â  Â  Â  Â  return "WANT_TO_READ";
Â  Â  Â  Â  case "LENDO":
Â  Â  Â  Â  Â  Â  return "READING";
Â  Â  Â  Â  case "LIDO":
Â  Â  Â  Â  Â  Â  return "READ";
Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  Â  return "WANT_TO_READ";
Â  Â  }
}


export default async function EditBookPage({ params }: EditBookPageProps) {
Â  Â  const id = params.id;
Â  Â  
Â  Â  // 1. BUSCAR O LIVRO
Â  Â  const book = await fetchBookData(id); 

Â  Â  // 2. BUSCAR A LISTA DE CATEGORIAS (NOVO)
Â  Â  const categories = await getAllCategories();

Â  Â  if (!book) {
Â  Â  Â  Â  notFound(); 
Â  Â  }

Â  Â  // TIPAGEM: Estamos forÃ§ando o tipo BookFormValues, mas o BookEditFormClient espera InitialBookProps, 
Â  Â  // que tem mais campos e nomes ligeiramente diferentes.
Â  Â  // Para resolver, vamos mapear para os nomes que a prop initialBook espera E incluir os campos extras.
Â  Â  const initialBookData = {
Â  Â  Â  Â  
Â  Â  Â  Â  // Campos de Dados: (Mapeados para os nomes esperados pelo InitialBookProps/FormClient)
Â  Â  Â  Â  id: String(book.id), // ID convertido para String (CorreÃ§Ã£o do erro anterior)
Â  Â  Â  Â  title: book.title,
Â  Â  Â  Â  author: book.author,
Â  Â  Â  Â  status: mapStatusToForm(book.status),
Â  Â  Â  Â  year: book.year ?? null, 
Â  Â  Â  Â  currentPage: book.currentPage ?? null, 
Â  Â  Â  Â  isbn: book.isbn ?? null, 
Â  Â  Â  Â  synopsis: book.synopsis ?? null,
Â  Â  Â  Â  genreId: book.genreId ?? null,
Â  Â  Â  Â  rating: book.rating ?? null,
Â  Â  Â  Â  
Â  Â  Â  Â  // ðŸ›‘ CORREÃ‡ÃƒO DOS NOMES DE PROPRIEDADE:
Â  Â  Â  Â  // O erro mencionou que faltam 'pages', 'cover' e 'notes' (que vocÃª mapeou para 'totalPages', 'coverUrl', 'personalNotes')
Â  Â  Â  Â  // Vamos usar os nomes que o componente CLIENTE espera:
Â  Â  Â  Â  pages: book.pages ?? null, Â  Â  Â // Mapeia book.pages para 'pages'
Â  Â  Â  Â  cover: book.cover ?? null, Â  Â  Â // Mapeia book.cover para 'cover'
Â  Â  Â  Â  notes: book.notes ?? null, Â  Â  Â // Mapeia book.notes para 'notes'

Â  Â  Â  Â  // ðŸ›‘ CORREÃ‡ÃƒO DOS METADADOS FALTANTES:
Â  Â  Â  Â  // O erro mencionou que faltam 'createdAt' e mais 2. Assumimos os campos comuns do seu tipo BookWithGenre.
Â  Â  Â  Â  createdAt: book.createdAt, // Propriedade 'createdAt' incluÃ­da
Â  Â  Â  Â  updatedAt: book.updatedAt, // Assumindo 'updatedAt' como um dos campos faltantes
Â  Â  Â  Â  genre: book.genre, Â  Â  Â  Â  // Assumindo que o objeto 'genre' completo Ã© o Ãºltimo campo faltante
Â  Â  };


Â  Â  return (
Â  Â  Â  Â  <main className="min-h-screen bg-gray-900 p-4 md:p-8">
Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto">
Â  Â  Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold text-white align-center mb-1">Editar Livro: {book.title}</h1>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* 3. PASSAR A PROP 'categories' OBRIGATÃ“RIA */}
Â  Â  Â  Â  Â  Â  Â  Â  <BookEditFormClient 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  initialBook={initialBookData as any} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  categories={categories} 
Â  Â  Â  Â  Â  Â  Â  Â  /> 
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </main>
Â  Â  );
}